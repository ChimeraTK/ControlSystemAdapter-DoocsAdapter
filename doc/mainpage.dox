/** \mainpage ChimeraTK-ControlSystemAdapter-DoocsAdapter

The ChimeraTK-ControlSystemAdapter-DoocsAdapter implements the %ChimeraTK Control System Adapter for DOOCS.

\section Integration Integrating your control system application into DOOCS

Prerequisites:
\li The application has been writen with the ChimeraTK-ApplicationCore library,
\li a working DOOCS environment (see: http://doocs.desy.de).

To integrate the application into DOOCS, it has to be linked against the ChimeraTK-ControlSystemAdapter-DoocsAdapter
library. Simply use the `add_dependency()` cmake macro coming with the %ChimeraTK project template, then add
`${ChimeraTK-ControlSystemAdapter-DoocsAdapter_LINK_FLAGS}` to the `CMAKE_LINK_FLAGS` and
`${ChimeraTK-ControlSystemAdapter-DoocsAdapter_LIBRARIES}` to the libraries your executable links against. It is not
necessary to change the include path.

In addition, several configuration files have to be provided to your executable at runtime.

\subsection DOOCS_config DOOCS configuration file

Firstly, all DOOCS servers require the usual DOOCS `servername.conf` file. A simple example for this file is this:
\include tests/serverTestSpectrumArray.conf

Replace the RPC number with the number corresponding to your application. You should also change the uid/gid numbers
and the name of the server location according to your needs. Finally, you need to have entries for all locations your
server should provide. Since the location is a concept which is introduced by DOOCS, the application does not directly
define them. Hence, you need to provide a second configuration file which defines how the variable household provided
by your application should be mapped to the DOOCS structure.

All locations have the same `eq_fct_type` 10. As DOOCS will add the properties inside the locations automatically, you
do not have to specify them here. Missing locations will also be added automatically by the adapter, so it is perfectly fine to just have the server
location in the config file.

\subsection mapping_file DOOCS adapter mapping file

The mapping of the application variable household on to the DOOCS structure is done with a XML file. The file has to be
called `applicationName-DoocsVariableConfig.xml` (replace `applicationName` with the name of your application).

If this file is omitted, all variables will be exported to DOOCS, with the highest hierarchy level becoming the location 
name, and the other levels being converted into a dot-separated property name (i.e. /Module2/SubModule3/property7
becomes DOOCS property //Module2/SubModule3.property7).

An example for the mapping file is:

\include tests/serverTestSpectrumArray-DoocsVariableConfig.xml

Each location is specified with a `location` tag.The `location` tag must have one XML attribute:
- `name`: Specifies the name of the location

Properties can be specified in each location with the property tag, or in case of special properties like a `D_spectrum`
with the respective tag. A list of special properties is found in the next section. Each `property` tag has the
following attributes:
- `source`: Mandatory, specify the name of the process variable
- `name`: Optional, specify the property name. If omitted, the name is derived from the source name by replacing slashes
          with dots.
         
\subsection import Automatic mapping of many variables

As a shortcut, the `import` tag can be used to map a large number of properties with a single command. The tag doesn't
take any sub-tags but should contain a directory name of process variables, which is to be mapped recursively. If the
`import` tag is specified inside a location tag, the specified process variable directory is mapped into this
location. The `import` tag can also appear in the root tag, in which case the first hierarchy level will become the
location name. Note that the import will only map variables which have not been mapped before by explicit mapping or
other `import` tags. This is useful to map a big bulk of automatic mapping variables after picking the special cases,
which needs to be mapped individually.

The `import` tag can take optionally one attribute:
- `directory`: Add a prefix to the property names, which is separated with a dot from the rest of the property name.

An example with many different automatic mappings is here:
\include tests/serverTestRenameImport-DoocsVariableConfig.xml

\subsection special_config Special configuration

There are a number of configuration parameters which can be set on different scopes to control the exact behaviour of
the DOOCS properties. All of the following XML tags can appear either directly in the root tag, or in a location tag, or
in a property tag (or any tag for a special property, see Secion \ref special_properties).

- `has_history`: Can be set to false or true (default) If set to true, the properties will have a history, if the
                 property type supports this.
- `is_writeable`: If set to false, the property will be forced to be read-only, even if the process variable is
                  writeable.
- `macro_pulse_number_source`: Name of process variable which contains the macro pusle number which should be attached
                               to the properties.
- `data_matching`: Possible values are `none`, `exact`. This is relevant when macro pulse number source is given.
            The default is `exact`, which means the server discards data coming in so late that it's version number
            is overtaken by that of the macro pulse number.

- `persist`: Controls behaviour of DOOCS persistency files. This is only important for writable arrays with more than MAX_CONF_LENGTH entries 
             (usually 20). Possible values are `true` (the default) - always save the array, where
             long arrays are saved in separate files below `hist/` while short arrays go into the server config file;
             `false` -  do not save the array;
             `auto` - default DOOCS behaviour, only arrays with up to 20 entries are saved, in server config file.


\subsection zeromq ZeroMQ publication

DOOCS properties can be published via ZeroMQ so that clients can be notified about updates in real time. To enable this
one simply has to specifiy the `publish_ZMQ` tag as shown in the following example:

\include tests/serverTestZeroMQ-DoocsVariableConfig.xml

If the `macro_pulse_number_source` tag has been used, the macro pulse number will be added to the ZeroMQ header.

\subsection type_override Overriding auto-detected types

If the automatically derived data type of the DOOCS property is not fitting, it is possible to override it using the
`type` attribute on the `property` and \ref D_array tags. `type` can be one of

- auto (default)
- byte
- short
- int
- long
- float
- double

For an example, see above in Section \ref mapping_file.

\subsection special_properties Special DOOCS properties

Instead of letting the DOOCS adapter automatically decide which DOOCS data type to use, it is possible to specify a
particular type. This needs to be done whenever a special DOOCS property type should be used.



\subsubsection D_spectrum D_spectrum
The `D_spectrum` tag takes the following arguments through sub-tags:
- `start`: The x-axis start as a fixed number
- `increment`: The x-axis increment between two samples as a fixed number
- `startSource`: Name of process variable which should be used as x-axis start
- `incrementSource`: Name of process variable which should be used as x-axis increment
- `numberOfBuffers`: Create a buffered D_spectrum with a short-term history (so clients can read consistent data across
                     multiple D_spectrum). Requires a configured macro_pulse_number_source.

The `D_spectrum` tag takes the following arguments through sub-tags:
- `unit` : A description of the respective axis. The axis is chosen with the `axis` property which can either be `x` or `y`.
   It can also contain a "start" and an "end" for the initial display parameters as well as "logarithmic" for switching the
   scale accordingly. For an example of this see \ref D_xy

For an example, see above in Section \ref mapping_file.

\subsubsection D_array D_array
The `D_array` tag takes the following arguments through XML attributes of the D_array tag:
- `type`: Override the data type. Can be one of:
  - auto (default)
  - byte
  - short
  - int
  - long
  - float
  - double

For an example, see above in Section \ref mapping_file.

\subsubsection D_xy D_xy
The `D_xy` tag takes the following arguments through properties:
- `x_source` : Name of process variable which should be used for x-axis values
- `y_source` : Name of process variable which should be used for y-axis values
- `name` : Name of the mapped property
The `D_xy` tag takes the following arguments through sub-tags:
- `description` : A description for the XY plot
- `unit` : A description of the respective axis. The axis is chosen with the `axis` property which can either be `x` or `y`

\include tests/serverTestXy-DoocsVariableConfig.xml

\subsubsection D_ifff D_ifff
The `D_ifff` tag takes the following arguments through attributes:
- `i1_source` : Name of process variable which should be used for first integer values
- `f1_source`, `f2_source`, `f3_source` : Name of process variables which should be used for float values
- `name` : Name of the mapped property
The four mapped variables must provide data-consistent updates, unless `data_matching="none"` is specified.

\include tests/serverTestIfff-DoocsVariableConfig.xml

\subsubsection D_iiii D_iiii
The `D_iiii` tag takes the following arguments through attributes:
- `source` : Name of process variable which should be used for first integer values.
- `name` : Name of the mapped property

\include tests/serverTestIiii-DoocsVariableConfig.xml

\subsubsection D_imagec D_imagec
The `D_imagec` (c for compact image) tag takes the following arguments through attributes:
- `source` : Name of process variable which contains the data as array of unsigned char. Data consists of an
  image header defined as ChimeraTK::ImgHeader followed by the encoded pixel values.
- `description`: Used as comment for the image, in the meta data.

If `data_matching="exact"` is set, the provided macropulse number is set as event id in the meta data.

\subsection set_error Error reporting
The special tag `set_error` is allowed only once per location. XML attributes:
- `statusCodeSource` : Path to the process variable which should be used for reading error/status codes.

DoocsAdapter will automatically look for an associated variable with error/status messages, and if present, read both
consistently.
Errors indicated via the status variable will be published via DOOCS set_error function (of the location), which
sets the properties ERROR, ERROR.STR, STS.ERROR, STS.NEWERROR, and also logs into LOG, LOG.LAST, LOG_HTML and LOG_HTML.LAST.
Compare DOOCS documentation for error properties and propagation to the overall error counting per server, SVR.ERROR_COUNT.

          
*/
